marked.setOptions({
  mangle: false,
  headerIds: false
});

const chatHistory = document.getElementById("chat-history");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");
const chatForm = document.getElementById("chat-form");

function addMessage(sender, text) {
  const messageElement = document.createElement("div");
  messageElement.classList.add(
    "message-bubble",
    sender === "user" ? "user-message" : "agent-message"
  );
  messageElement.setAttribute("aria-label", sender === "user" ? "User message" : "Agent message");
  if (sender === "agent") {
    // Use DOMPurify to sanitize HTML generated by marked
    messageElement.innerHTML = DOMPurify.sanitize(marked.parse(text));
  } else {
    messageElement.textContent = text;
  }
  chatHistory.appendChild(messageElement);
  chatHistory.scrollTop = chatHistory.scrollHeight;
  chatHistory.setAttribute("aria-live", "polite");
}

function showTypingIndicator() {
  const typingDiv = document.createElement("div");
  typingDiv.className = "typing-indicator agent-message";
  typingDiv.innerHTML = '<span class="typing-dot"></span><span class="typing-dot"></span><span class="typing-dot"></span>';
  typingDiv.setAttribute("id", "typing-indicator");
  chatHistory.appendChild(typingDiv);
  chatHistory.scrollTop = chatHistory.scrollHeight;
}

function removeTypingIndicator() {
  const typingDiv = document.getElementById("typing-indicator");
  if (typingDiv) chatHistory.removeChild(typingDiv);
}

async function sendMessage(event) {
  event && event.preventDefault();
  const message = userInput.value.trim();
  if (message === "") return;

  addMessage("user", message);
  userInput.value = "";
  sendBtn.disabled = true;

  showTypingIndicator();

  try {
    const response = await fetch("/api/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ message: message }),
    });

    const data = await response.json();
    removeTypingIndicator();
    if (data.status === "success" && data.response) {
      addMessage("agent", data.response);
    } else if (data.status === "error" && data.error) {
      addMessage("agent", `Error: ${data.error}`);
    } else {
      addMessage("agent", "Unexpected response from server.");
    }
  } catch (error) {
    removeTypingIndicator();
    addMessage("agent", "Sorry, something went wrong. Please try again.");
  }
  sendBtn.disabled = false;
  userInput.focus();
}

chatForm.addEventListener("submit", sendMessage);
userInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter") {
    sendMessage(e);
  }
});

// Autofocus input on page load
window.onload = () => userInput.focus();